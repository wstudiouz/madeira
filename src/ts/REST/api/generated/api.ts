/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {Configuration} from "./configuration";
import type {AxiosPromise, AxiosInstance, AxiosRequestConfig} from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type {RequestArgs} from "./base";
// @ts-ignore
import {BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError} from "./base";

/**
 *
 * @export
 * @interface AboutComplexComponent
 */
export interface AboutComplexComponent {
  /**
   *
   * @type {number}
   * @memberof AboutComplexComponent
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AboutComplexComponent
   */
  title?: string;
  /**
   *
   * @type {AboutComplexComponentRightTopCard}
   * @memberof AboutComplexComponent
   */
  rightTopCard?: AboutComplexComponentRightTopCard;
  /**
   *
   * @type {AboutComplexComponentRightTopCard}
   * @memberof AboutComplexComponent
   */
  rightBottomCard?: AboutComplexComponentRightTopCard;
}
/**
 *
 * @export
 * @interface AboutComplexComponentRightTopCard
 */
export interface AboutComplexComponentRightTopCard {
  /**
   *
   * @type {number}
   * @memberof AboutComplexComponentRightTopCard
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AboutComplexComponentRightTopCard
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof AboutComplexComponentRightTopCard
   */
  description?: string;
}
/**
 *
 * @export
 * @interface AboutHandWorkComponent
 */
export interface AboutHandWorkComponent {
  /**
   *
   * @type {number}
   * @memberof AboutHandWorkComponent
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AboutHandWorkComponent
   */
  title?: string;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof AboutHandWorkComponent
   */
  topImg?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof AboutHandWorkComponent
   */
  bottomImg?: AboutHeroComponentImg1;
}
/**
 *
 * @export
 * @interface AboutHeroComponent
 */
export interface AboutHeroComponent {
  /**
   *
   * @type {number}
   * @memberof AboutHeroComponent
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponent
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponent
   */
  text?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponent
   */
  desc?: string;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof AboutHeroComponent
   */
  img1?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof AboutHeroComponent
   */
  img2?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof AboutHeroComponent
   */
  img3?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof AboutHeroComponent
   */
  img4?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof AboutHeroComponent
   */
  img5?: AboutHeroComponentImg1;
}
/**
 *
 * @export
 * @interface AboutHeroComponentImg1
 */
export interface AboutHeroComponentImg1 {
  /**
   *
   * @type {AboutHeroComponentImg1Data}
   * @memberof AboutHeroComponentImg1
   */
  data?: AboutHeroComponentImg1Data;
}
/**
 *
 * @export
 * @interface AboutHeroComponentImg1Data
 */
export interface AboutHeroComponentImg1Data {
  /**
   *
   * @type {number}
   * @memberof AboutHeroComponentImg1Data
   */
  id?: number;
  /**
   *
   * @type {AboutHeroComponentImg1DataAttributes}
   * @memberof AboutHeroComponentImg1Data
   */
  attributes?: AboutHeroComponentImg1DataAttributes;
}
/**
 *
 * @export
 * @interface AboutHeroComponentImg1DataAttributes
 */
export interface AboutHeroComponentImg1DataAttributes {
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  alternativeText?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  caption?: string;
  /**
   *
   * @type {number}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  width?: number;
  /**
   *
   * @type {number}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  height?: number;
  /**
   *
   * @type {any}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  formats?: any;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  hash?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  ext?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  mime?: string;
  /**
   *
   * @type {number}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  size?: number;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  url?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  previewUrl?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  provider?: string;
  /**
   *
   * @type {any}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  provider_metadata?: any;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  related?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {AboutHeroComponentImg1DataAttributesFolder}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  folder?: AboutHeroComponentImg1DataAttributesFolder;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  folderPath?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof AboutHeroComponentImg1DataAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface AboutHeroComponentImg1DataAttributesFolder
 */
export interface AboutHeroComponentImg1DataAttributesFolder {
  /**
   *
   * @type {AboutHeroComponentImg1DataAttributesFolderData}
   * @memberof AboutHeroComponentImg1DataAttributesFolder
   */
  data?: AboutHeroComponentImg1DataAttributesFolderData;
}
/**
 *
 * @export
 * @interface AboutHeroComponentImg1DataAttributesFolderData
 */
export interface AboutHeroComponentImg1DataAttributesFolderData {
  /**
   *
   * @type {number}
   * @memberof AboutHeroComponentImg1DataAttributesFolderData
   */
  id?: number;
  /**
   *
   * @type {AboutHeroComponentImg1DataAttributesFolderDataAttributes}
   * @memberof AboutHeroComponentImg1DataAttributesFolderData
   */
  attributes?: AboutHeroComponentImg1DataAttributesFolderDataAttributes;
}
/**
 *
 * @export
 * @interface AboutHeroComponentImg1DataAttributesFolderDataAttributes
 */
export interface AboutHeroComponentImg1DataAttributesFolderDataAttributes {
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributes
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributes
   */
  pathId?: number;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributes
   */
  parent?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributes
   */
  children?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {AboutHeroComponentImg1DataAttributesFolderDataAttributesFiles}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributes
   */
  files?: AboutHeroComponentImg1DataAttributesFolderDataAttributesFiles;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributes
   */
  path?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface AboutHeroComponentImg1DataAttributesFolderDataAttributesFiles
 */
export interface AboutHeroComponentImg1DataAttributesFolderDataAttributesFiles {
  /**
   *
   * @type {Array<AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInner>}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFiles
   */
  data?: Array<AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInner>;
}
/**
 *
 * @export
 * @interface AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInner
 */
export interface AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInner {
  /**
   *
   * @type {number}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInner
   */
  id?: number;
  /**
   *
   * @type {AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInner
   */
  attributes?: AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes;
}
/**
 *
 * @export
 * @interface AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
 */
export interface AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  alternativeText?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  caption?: string;
  /**
   *
   * @type {number}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  width?: number;
  /**
   *
   * @type {number}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  height?: number;
  /**
   *
   * @type {any}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  formats?: any;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  hash?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  ext?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  mime?: string;
  /**
   *
   * @type {number}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  size?: number;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  url?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  previewUrl?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  provider?: string;
  /**
   *
   * @type {any}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  provider_metadata?: any;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  related?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  folder?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  folderPath?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedBy}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedBy;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof AboutHeroComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface AboutPageListResponse
 */
export interface AboutPageListResponse {
  /**
   *
   * @type {Array<AboutPageListResponseDataItem>}
   * @memberof AboutPageListResponse
   */
  data?: Array<AboutPageListResponseDataItem>;
  /**
   *
   * @type {AboutPageListResponseMeta}
   * @memberof AboutPageListResponse
   */
  meta?: AboutPageListResponseMeta;
}
/**
 *
 * @export
 * @interface AboutPageListResponseDataItem
 */
export interface AboutPageListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof AboutPageListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributes}
   * @memberof AboutPageListResponseDataItem
   */
  attributes?: AboutPageListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface AboutPageListResponseDataItemAttributes
 */
export interface AboutPageListResponseDataItemAttributes {
  /**
   *
   * @type {AboutHeroComponent}
   * @memberof AboutPageListResponseDataItemAttributes
   */
  Hero?: AboutHeroComponent;
  /**
   *
   * @type {AboutComplexComponent}
   * @memberof AboutPageListResponseDataItemAttributes
   */
  Complex?: AboutComplexComponent;
  /**
   *
   * @type {AboutWarrantyComponent}
   * @memberof AboutPageListResponseDataItemAttributes
   */
  Warranty?: AboutWarrantyComponent;
  /**
   *
   * @type {AboutProductionComponent}
   * @memberof AboutPageListResponseDataItemAttributes
   */
  Production?: AboutProductionComponent;
  /**
   *
   * @type {AboutHandWorkComponent}
   * @memberof AboutPageListResponseDataItemAttributes
   */
  HandWork?: AboutHandWorkComponent;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedBy}
   * @memberof AboutPageListResponseDataItemAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedBy;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof AboutPageListResponseDataItemAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface AboutPageListResponseDataItemAttributesCreatedBy
 */
export interface AboutPageListResponseDataItemAttributesCreatedBy {
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByData}
   * @memberof AboutPageListResponseDataItemAttributesCreatedBy
   */
  data?: AboutPageListResponseDataItemAttributesCreatedByData;
}
/**
 *
 * @export
 * @interface AboutPageListResponseDataItemAttributesCreatedByData
 */
export interface AboutPageListResponseDataItemAttributesCreatedByData {
  /**
   *
   * @type {number}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByData
   */
  id?: number;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributes}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByData
   */
  attributes?: AboutPageListResponseDataItemAttributesCreatedByDataAttributes;
}
/**
 *
 * @export
 * @interface AboutPageListResponseDataItemAttributesCreatedByDataAttributes
 */
export interface AboutPageListResponseDataItemAttributesCreatedByDataAttributes {
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributes
   */
  firstname?: string;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributes
   */
  lastname?: string;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributes
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributes
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributes
   */
  resetPasswordToken?: string;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributes
   */
  registrationToken?: string;
  /**
   *
   * @type {boolean}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributes
   */
  isActive?: boolean;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRoles}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributes
   */
  roles?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRoles;
  /**
   *
   * @type {boolean}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributes
   */
  blocked?: boolean;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributes
   */
  preferedLanguage?: string;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRoles
 */
export interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRoles {
  /**
   *
   * @type {Array<AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInner>}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRoles
   */
  data?: Array<AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInner>;
}
/**
 *
 * @export
 * @interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInner
 */
export interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInner {
  /**
   *
   * @type {number}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInner
   */
  id?: number;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributes}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInner
   */
  attributes?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributes;
}
/**
 *
 * @export
 * @interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributes
 */
export interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  code?: string;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  description?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  users?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  permissions?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions
 */
export interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions {
  /**
   *
   * @type {Array<AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner>}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions
   */
  data?: Array<AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner>;
}
/**
 *
 * @export
 * @interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner
 */
export interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner {
  /**
   *
   * @type {number}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner
   */
  id?: number;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner
   */
  attributes?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes;
}
/**
 *
 * @export
 * @interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
 */
export interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  action?: string;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  subject?: string;
  /**
   *
   * @type {any}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  properties?: any;
  /**
   *
   * @type {any}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  conditions?: any;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  role?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole
 */
export interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole {
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInner}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole
   */
  data?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInner;
}
/**
 *
 * @export
 * @interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers
 */
export interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers {
  /**
   *
   * @type {Array<AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInner>}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers
   */
  data?: Array<AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInner>;
}
/**
 *
 * @export
 * @interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInner
 */
export interface AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInner {
  /**
   *
   * @type {number}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInner
   */
  id?: number;
  /**
   *
   * @type {object}
   * @memberof AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInner
   */
  attributes?: object;
}
/**
 *
 * @export
 * @interface AboutPageListResponseDataItemLocalized
 */
export interface AboutPageListResponseDataItemLocalized {
  /**
   *
   * @type {number}
   * @memberof AboutPageListResponseDataItemLocalized
   */
  id?: number;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributes}
   * @memberof AboutPageListResponseDataItemLocalized
   */
  attributes?: AboutPageListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface AboutPageListResponseMeta
 */
export interface AboutPageListResponseMeta {
  /**
   *
   * @type {AboutPageListResponseMetaPagination}
   * @memberof AboutPageListResponseMeta
   */
  pagination?: AboutPageListResponseMetaPagination;
}
/**
 *
 * @export
 * @interface AboutPageListResponseMetaPagination
 */
export interface AboutPageListResponseMetaPagination {
  /**
   *
   * @type {number}
   * @memberof AboutPageListResponseMetaPagination
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof AboutPageListResponseMetaPagination
   */
  pageSize?: number;
  /**
   *
   * @type {number}
   * @memberof AboutPageListResponseMetaPagination
   */
  pageCount?: number;
  /**
   *
   * @type {number}
   * @memberof AboutPageListResponseMetaPagination
   */
  total?: number;
}
/**
 *
 * @export
 * @interface AboutPageRequest
 */
export interface AboutPageRequest {
  /**
   *
   * @type {AboutPageRequestData}
   * @memberof AboutPageRequest
   */
  data: AboutPageRequestData;
}
/**
 *
 * @export
 * @interface AboutPageRequestData
 */
export interface AboutPageRequestData {
  /**
   *
   * @type {AboutHeroComponent}
   * @memberof AboutPageRequestData
   */
  Hero?: AboutHeroComponent;
  /**
   *
   * @type {AboutComplexComponent}
   * @memberof AboutPageRequestData
   */
  Complex?: AboutComplexComponent;
  /**
   *
   * @type {AboutWarrantyComponent}
   * @memberof AboutPageRequestData
   */
  Warranty?: AboutWarrantyComponent;
  /**
   *
   * @type {AboutProductionComponent}
   * @memberof AboutPageRequestData
   */
  Production?: AboutProductionComponent;
  /**
   *
   * @type {AboutHandWorkComponent}
   * @memberof AboutPageRequestData
   */
  HandWork?: AboutHandWorkComponent;
}
/**
 *
 * @export
 * @interface AboutPageResponse
 */
export interface AboutPageResponse {
  /**
   *
   * @type {AboutPageResponseDataObject}
   * @memberof AboutPageResponse
   */
  data?: AboutPageResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof AboutPageResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface AboutPageResponseDataObject
 */
export interface AboutPageResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof AboutPageResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributes}
   * @memberof AboutPageResponseDataObject
   */
  attributes?: AboutPageListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface AboutPageResponseDataObjectLocalized
 */
export interface AboutPageResponseDataObjectLocalized {
  /**
   *
   * @type {number}
   * @memberof AboutPageResponseDataObjectLocalized
   */
  id?: number;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributes}
   * @memberof AboutPageResponseDataObjectLocalized
   */
  attributes?: AboutPageListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface AboutProductionComponent
 */
export interface AboutProductionComponent {
  /**
   *
   * @type {number}
   * @memberof AboutProductionComponent
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AboutProductionComponent
   */
  title?: string;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof AboutProductionComponent
   */
  img1?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof AboutProductionComponent
   */
  img2?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutComplexComponentRightTopCard}
   * @memberof AboutProductionComponent
   */
  factory?: AboutComplexComponentRightTopCard;
}
/**
 *
 * @export
 * @interface AboutWarrantyComponent
 */
export interface AboutWarrantyComponent {
  /**
   *
   * @type {number}
   * @memberof AboutWarrantyComponent
   */
  id?: number;
  /**
   *
   * @type {AboutComplexComponentRightTopCard}
   * @memberof AboutWarrantyComponent
   */
  warranty?: AboutComplexComponentRightTopCard;
  /**
   *
   * @type {AboutWarrantyComponentSupCard}
   * @memberof AboutWarrantyComponent
   */
  supCard?: AboutWarrantyComponentSupCard;
  /**
   *
   * @type {AboutWarrantyComponentSupCard}
   * @memberof AboutWarrantyComponent
   */
  supCard2?: AboutWarrantyComponentSupCard;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof AboutWarrantyComponent
   */
  warrantyYearBg?: AboutHeroComponentImg1;
}
/**
 *
 * @export
 * @interface AboutWarrantyComponentSupCard
 */
export interface AboutWarrantyComponentSupCard {
  /**
   *
   * @type {number}
   * @memberof AboutWarrantyComponentSupCard
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AboutWarrantyComponentSupCard
   */
  text?: string;
  /**
   *
   * @type {string}
   * @memberof AboutWarrantyComponentSupCard
   */
  desc?: string;
  /**
   *
   * @type {number}
   * @memberof AboutWarrantyComponentSupCard
   */
  sup?: number;
}
/**
 *
 * @export
 * @interface AuthChangePasswordPostRequest
 */
export interface AuthChangePasswordPostRequest {
  /**
   *
   * @type {string}
   * @memberof AuthChangePasswordPostRequest
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof AuthChangePasswordPostRequest
   */
  currentPassword: string;
  /**
   *
   * @type {string}
   * @memberof AuthChangePasswordPostRequest
   */
  passwordConfirmation: string;
}
/**
 *
 * @export
 * @interface AuthForgotPasswordPostRequest
 */
export interface AuthForgotPasswordPostRequest {
  /**
   *
   * @type {string}
   * @memberof AuthForgotPasswordPostRequest
   */
  email?: string;
}
/**
 *
 * @export
 * @interface AuthLocalPostRequest
 */
export interface AuthLocalPostRequest {
  /**
   *
   * @type {string}
   * @memberof AuthLocalPostRequest
   */
  identifier?: string;
  /**
   *
   * @type {string}
   * @memberof AuthLocalPostRequest
   */
  password?: string;
}
/**
 *
 * @export
 * @interface AuthLocalRegisterPostRequest
 */
export interface AuthLocalRegisterPostRequest {
  /**
   *
   * @type {string}
   * @memberof AuthLocalRegisterPostRequest
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof AuthLocalRegisterPostRequest
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof AuthLocalRegisterPostRequest
   */
  password?: string;
}
/**
 *
 * @export
 * @interface AuthResetPasswordPostRequest
 */
export interface AuthResetPasswordPostRequest {
  /**
   *
   * @type {string}
   * @memberof AuthResetPasswordPostRequest
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof AuthResetPasswordPostRequest
   */
  passwordConfirmation?: string;
  /**
   *
   * @type {string}
   * @memberof AuthResetPasswordPostRequest
   */
  code?: string;
}
/**
 *
 * @export
 * @interface AuthSendEmailConfirmationPost200Response
 */
export interface AuthSendEmailConfirmationPost200Response {
  /**
   *
   * @type {string}
   * @memberof AuthSendEmailConfirmationPost200Response
   */
  email?: string;
  /**
   *
   * @type {Enum}
   * @memberof AuthSendEmailConfirmationPost200Response
   */
  sent?: AuthSendEmailConfirmationPost200ResponseSentEnum;
}

export const AuthSendEmailConfirmationPost200ResponseSentEnum = {
  True: "true",
} as const;

export type AuthSendEmailConfirmationPost200ResponseSentEnum =
  (typeof AuthSendEmailConfirmationPost200ResponseSentEnum)[keyof typeof AuthSendEmailConfirmationPost200ResponseSentEnum];

/**
 *
 * @export
 * @interface CatalogueListResponse
 */
export interface CatalogueListResponse {
  /**
   *
   * @type {Array<CatalogueListResponseDataItem>}
   * @memberof CatalogueListResponse
   */
  data?: Array<CatalogueListResponseDataItem>;
  /**
   *
   * @type {AboutPageListResponseMeta}
   * @memberof CatalogueListResponse
   */
  meta?: AboutPageListResponseMeta;
}
/**
 *
 * @export
 * @interface CatalogueListResponseDataItem
 */
export interface CatalogueListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof CatalogueListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {CatalogueListResponseDataItemAttributes}
   * @memberof CatalogueListResponseDataItem
   */
  attributes?: CatalogueListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface CatalogueListResponseDataItemAttributes
 */
export interface CatalogueListResponseDataItemAttributes {
  /**
   *
   * @type {string}
   * @memberof CatalogueListResponseDataItemAttributes
   */
  title?: string;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof CatalogueListResponseDataItemAttributes
   */
  img?: AboutHeroComponentImg1;
  /**
   *
   * @type {string}
   * @memberof CatalogueListResponseDataItemAttributes
   */
  price?: string;
  /**
   *
   * @type {string}
   * @memberof CatalogueListResponseDataItemAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof CatalogueListResponseDataItemAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof CatalogueListResponseDataItemAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedBy}
   * @memberof CatalogueListResponseDataItemAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedBy;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof CatalogueListResponseDataItemAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface CatalogueListResponseDataItemLocalized
 */
export interface CatalogueListResponseDataItemLocalized {
  /**
   *
   * @type {number}
   * @memberof CatalogueListResponseDataItemLocalized
   */
  id?: number;
  /**
   *
   * @type {CatalogueListResponseDataItemAttributes}
   * @memberof CatalogueListResponseDataItemLocalized
   */
  attributes?: CatalogueListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface CatalogueRequest
 */
export interface CatalogueRequest {
  /**
   *
   * @type {CatalogueRequestData}
   * @memberof CatalogueRequest
   */
  data: CatalogueRequestData;
}
/**
 *
 * @export
 * @interface CatalogueRequestData
 */
export interface CatalogueRequestData {
  /**
   *
   * @type {string}
   * @memberof CatalogueRequestData
   */
  title?: string;
  /**
   *
   * @type {CatalogueRequestDataImg}
   * @memberof CatalogueRequestData
   */
  img?: CatalogueRequestDataImg;
  /**
   *
   * @type {string}
   * @memberof CatalogueRequestData
   */
  price?: string;
}
/**
 * @type CatalogueRequestDataImg
 * @export
 */
export type CatalogueRequestDataImg = number | string;

/**
 *
 * @export
 * @interface CatalogueResponse
 */
export interface CatalogueResponse {
  /**
   *
   * @type {CatalogueResponseDataObject}
   * @memberof CatalogueResponse
   */
  data?: CatalogueResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof CatalogueResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface CatalogueResponseDataObject
 */
export interface CatalogueResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof CatalogueResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {CatalogueListResponseDataItemAttributes}
   * @memberof CatalogueResponseDataObject
   */
  attributes?: CatalogueListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface CatalogueResponseDataObjectLocalized
 */
export interface CatalogueResponseDataObjectLocalized {
  /**
   *
   * @type {number}
   * @memberof CatalogueResponseDataObjectLocalized
   */
  id?: number;
  /**
   *
   * @type {CatalogueListResponseDataItemAttributes}
   * @memberof CatalogueResponseDataObjectLocalized
   */
  attributes?: CatalogueListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface ContactPageListResponse
 */
export interface ContactPageListResponse {
  /**
   *
   * @type {Array<ContactPageListResponseDataItem>}
   * @memberof ContactPageListResponse
   */
  data?: Array<ContactPageListResponseDataItem>;
  /**
   *
   * @type {AboutPageListResponseMeta}
   * @memberof ContactPageListResponse
   */
  meta?: AboutPageListResponseMeta;
}
/**
 *
 * @export
 * @interface ContactPageListResponseDataItem
 */
export interface ContactPageListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof ContactPageListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {ContactPageListResponseDataItemAttributes}
   * @memberof ContactPageListResponseDataItem
   */
  attributes?: ContactPageListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface ContactPageListResponseDataItemAttributes
 */
export interface ContactPageListResponseDataItemAttributes {
  /**
   *
   * @type {string}
   * @memberof ContactPageListResponseDataItemAttributes
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof ContactPageListResponseDataItemAttributes
   */
  phone?: string;
  /**
   *
   * @type {string}
   * @memberof ContactPageListResponseDataItemAttributes
   */
  phoneLabel?: string;
  /**
   *
   * @type {string}
   * @memberof ContactPageListResponseDataItemAttributes
   */
  moreText?: string;
  /**
   *
   * @type {string}
   * @memberof ContactPageListResponseDataItemAttributes
   */
  moreDesc?: string;
  /**
   *
   * @type {string}
   * @memberof ContactPageListResponseDataItemAttributes
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof ContactPageListResponseDataItemAttributes
   */
  phoneText?: string;
  /**
   *
   * @type {string}
   * @memberof ContactPageListResponseDataItemAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof ContactPageListResponseDataItemAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof ContactPageListResponseDataItemAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedBy}
   * @memberof ContactPageListResponseDataItemAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedBy;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof ContactPageListResponseDataItemAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface ContactPageListResponseDataItemLocalized
 */
export interface ContactPageListResponseDataItemLocalized {
  /**
   *
   * @type {number}
   * @memberof ContactPageListResponseDataItemLocalized
   */
  id?: number;
  /**
   *
   * @type {ContactPageListResponseDataItemAttributes}
   * @memberof ContactPageListResponseDataItemLocalized
   */
  attributes?: ContactPageListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface ContactPageRequest
 */
export interface ContactPageRequest {
  /**
   *
   * @type {ContactPageRequestData}
   * @memberof ContactPageRequest
   */
  data: ContactPageRequestData;
}
/**
 *
 * @export
 * @interface ContactPageRequestData
 */
export interface ContactPageRequestData {
  /**
   *
   * @type {string}
   * @memberof ContactPageRequestData
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof ContactPageRequestData
   */
  phone: string;
  /**
   *
   * @type {string}
   * @memberof ContactPageRequestData
   */
  phoneLabel: string;
  /**
   *
   * @type {string}
   * @memberof ContactPageRequestData
   */
  moreText: string;
  /**
   *
   * @type {string}
   * @memberof ContactPageRequestData
   */
  moreDesc: string;
  /**
   *
   * @type {string}
   * @memberof ContactPageRequestData
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof ContactPageRequestData
   */
  phoneText: string;
}
/**
 *
 * @export
 * @interface ContactPageResponse
 */
export interface ContactPageResponse {
  /**
   *
   * @type {ContactPageResponseDataObject}
   * @memberof ContactPageResponse
   */
  data?: ContactPageResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof ContactPageResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface ContactPageResponseDataObject
 */
export interface ContactPageResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof ContactPageResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {ContactPageListResponseDataItemAttributes}
   * @memberof ContactPageResponseDataObject
   */
  attributes?: ContactPageListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface ContactPageResponseDataObjectLocalized
 */
export interface ContactPageResponseDataObjectLocalized {
  /**
   *
   * @type {number}
   * @memberof ContactPageResponseDataObjectLocalized
   */
  id?: number;
  /**
   *
   * @type {ContactPageListResponseDataItemAttributes}
   * @memberof ContactPageResponseDataObjectLocalized
   */
  attributes?: ContactPageListResponseDataItemAttributes;
}
/**
 * @type ErrorData
 * @export
 */
export type ErrorData = Array<string> | object;

/**
 *
 * @export
 * @interface ErrorError
 */
export interface ErrorError {
  /**
   *
   * @type {number}
   * @memberof ErrorError
   */
  status?: number;
  /**
   *
   * @type {string}
   * @memberof ErrorError
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ErrorError
   */
  message?: string;
  /**
   *
   * @type {object}
   * @memberof ErrorError
   */
  details?: object;
}
/**
 *
 * @export
 * @interface HomeACompComponent
 */
export interface HomeACompComponent {
  /**
   *
   * @type {number}
   * @memberof HomeACompComponent
   */
  id?: number;
  /**
   *
   * @type {AboutComplexComponentRightTopCard}
   * @memberof HomeACompComponent
   */
  cardText?: AboutComplexComponentRightTopCard;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeACompComponent
   */
  image?: AboutHeroComponentImg1;
  /**
   *
   * @type {HomeACompComponentButton}
   * @memberof HomeACompComponent
   */
  button?: HomeACompComponentButton;
  /**
   *
   * @type {AboutComplexComponentRightTopCard}
   * @memberof HomeACompComponent
   */
  rightText?: AboutComplexComponentRightTopCard;
}
/**
 *
 * @export
 * @interface HomeACompComponentButton
 */
export interface HomeACompComponentButton {
  /**
   *
   * @type {number}
   * @memberof HomeACompComponentButton
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof HomeACompComponentButton
   */
  btnName?: string;
  /**
   *
   * @type {string}
   * @memberof HomeACompComponentButton
   */
  btnLink?: string;
}
/**
 *
 * @export
 * @interface HomeDcompComponent
 */
export interface HomeDcompComponent {
  /**
   *
   * @type {number}
   * @memberof HomeDcompComponent
   */
  id?: number;
  /**
   *
   * @type {AboutComplexComponentRightTopCard}
   * @memberof HomeDcompComponent
   */
  cardText?: AboutComplexComponentRightTopCard;
  /**
   *
   * @type {HomeACompComponentButton}
   * @memberof HomeDcompComponent
   */
  button?: HomeACompComponentButton;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeDcompComponent
   */
  letterImg?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeDcompComponent
   */
  firstImg?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeDcompComponent
   */
  secondImg?: AboutHeroComponentImg1;
}
/**
 *
 * @export
 * @interface HomeECompComponent
 */
export interface HomeECompComponent {
  /**
   *
   * @type {number}
   * @memberof HomeECompComponent
   */
  id?: number;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeECompComponent
   */
  leftImg?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutComplexComponentRightTopCard}
   * @memberof HomeECompComponent
   */
  cardText?: AboutComplexComponentRightTopCard;
  /**
   *
   * @type {HomeACompComponentButton}
   * @memberof HomeECompComponent
   */
  button?: HomeACompComponentButton;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeECompComponent
   */
  letterImg?: AboutHeroComponentImg1;
}
/**
 *
 * @export
 * @interface HomeICompComponent
 */
export interface HomeICompComponent {
  /**
   *
   * @type {number}
   * @memberof HomeICompComponent
   */
  id?: number;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeICompComponent
   */
  letterImgLeft?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeICompComponent
   */
  letterImgRight?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutComplexComponentRightTopCard}
   * @memberof HomeICompComponent
   */
  cardTextFirst?: AboutComplexComponentRightTopCard;
  /**
   *
   * @type {AboutComplexComponentRightTopCard}
   * @memberof HomeICompComponent
   */
  cardTextSecond?: AboutComplexComponentRightTopCard;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeICompComponent
   */
  bottomImg1?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeICompComponent
   */
  bottomImg2?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeICompComponent
   */
  bottomImg3?: AboutHeroComponentImg1;
}
/**
 *
 * @export
 * @interface HomeLetterComponent
 */
export interface HomeLetterComponent {
  /**
   *
   * @type {number}
   * @memberof HomeLetterComponent
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof HomeLetterComponent
   */
  over?: string;
  /**
   *
   * @type {string}
   * @memberof HomeLetterComponent
   */
  text?: string;
  /**
   *
   * @type {string}
   * @memberof HomeLetterComponent
   */
  shortKey?: string;
}
/**
 *
 * @export
 * @interface HomePageListResponse
 */
export interface HomePageListResponse {
  /**
   *
   * @type {Array<HomePageListResponseDataItem>}
   * @memberof HomePageListResponse
   */
  data?: Array<HomePageListResponseDataItem>;
  /**
   *
   * @type {AboutPageListResponseMeta}
   * @memberof HomePageListResponse
   */
  meta?: AboutPageListResponseMeta;
}
/**
 *
 * @export
 * @interface HomePageListResponseDataItem
 */
export interface HomePageListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof HomePageListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {HomePageListResponseDataItemAttributes}
   * @memberof HomePageListResponseDataItem
   */
  attributes?: HomePageListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface HomePageListResponseDataItemAttributes
 */
export interface HomePageListResponseDataItemAttributes {
  /**
   *
   * @type {HomeACompComponent}
   * @memberof HomePageListResponseDataItemAttributes
   */
  AComp?: HomeACompComponent;
  /**
   *
   * @type {HomeDcompComponent}
   * @memberof HomePageListResponseDataItemAttributes
   */
  DComp?: HomeDcompComponent;
  /**
   *
   * @type {HomeECompComponent}
   * @memberof HomePageListResponseDataItemAttributes
   */
  EComp?: HomeECompComponent;
  /**
   *
   * @type {HomeICompComponent}
   * @memberof HomePageListResponseDataItemAttributes
   */
  IComp?: HomeICompComponent;
  /**
   *
   * @type {HomeRCompComponent}
   * @memberof HomePageListResponseDataItemAttributes
   */
  RComp?: HomeRCompComponent;
  /**
   *
   * @type {HomeSecondACompComponent}
   * @memberof HomePageListResponseDataItemAttributes
   */
  SecondAComp?: HomeSecondACompComponent;
  /**
   *
   * @type {Array<HomeLetterComponent>}
   * @memberof HomePageListResponseDataItemAttributes
   */
  Letters?: Array<HomeLetterComponent>;
  /**
   *
   * @type {string}
   * @memberof HomePageListResponseDataItemAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof HomePageListResponseDataItemAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof HomePageListResponseDataItemAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedBy}
   * @memberof HomePageListResponseDataItemAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedBy;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof HomePageListResponseDataItemAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface HomePageListResponseDataItemLocalized
 */
export interface HomePageListResponseDataItemLocalized {
  /**
   *
   * @type {number}
   * @memberof HomePageListResponseDataItemLocalized
   */
  id?: number;
  /**
   *
   * @type {HomePageListResponseDataItemAttributes}
   * @memberof HomePageListResponseDataItemLocalized
   */
  attributes?: HomePageListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface HomePageRequest
 */
export interface HomePageRequest {
  /**
   *
   * @type {HomePageRequestData}
   * @memberof HomePageRequest
   */
  data: HomePageRequestData;
}
/**
 *
 * @export
 * @interface HomePageRequestData
 */
export interface HomePageRequestData {
  /**
   *
   * @type {HomeACompComponent}
   * @memberof HomePageRequestData
   */
  AComp?: HomeACompComponent;
  /**
   *
   * @type {HomeDcompComponent}
   * @memberof HomePageRequestData
   */
  DComp?: HomeDcompComponent;
  /**
   *
   * @type {HomeECompComponent}
   * @memberof HomePageRequestData
   */
  EComp?: HomeECompComponent;
  /**
   *
   * @type {HomeICompComponent}
   * @memberof HomePageRequestData
   */
  IComp?: HomeICompComponent;
  /**
   *
   * @type {HomeRCompComponent}
   * @memberof HomePageRequestData
   */
  RComp?: HomeRCompComponent;
  /**
   *
   * @type {HomeSecondACompComponent}
   * @memberof HomePageRequestData
   */
  SecondAComp?: HomeSecondACompComponent;
  /**
   *
   * @type {Array<HomeLetterComponent>}
   * @memberof HomePageRequestData
   */
  Letters: Array<HomeLetterComponent>;
}
/**
 *
 * @export
 * @interface HomePageResponse
 */
export interface HomePageResponse {
  /**
   *
   * @type {HomePageResponseDataObject}
   * @memberof HomePageResponse
   */
  data?: HomePageResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof HomePageResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface HomePageResponseDataObject
 */
export interface HomePageResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof HomePageResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {HomePageListResponseDataItemAttributes}
   * @memberof HomePageResponseDataObject
   */
  attributes?: HomePageListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface HomePageResponseDataObjectLocalized
 */
export interface HomePageResponseDataObjectLocalized {
  /**
   *
   * @type {number}
   * @memberof HomePageResponseDataObjectLocalized
   */
  id?: number;
  /**
   *
   * @type {HomePageListResponseDataItemAttributes}
   * @memberof HomePageResponseDataObjectLocalized
   */
  attributes?: HomePageListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface HomeRCompComponent
 */
export interface HomeRCompComponent {
  /**
   *
   * @type {number}
   * @memberof HomeRCompComponent
   */
  id?: number;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeRCompComponent
   */
  rightImg1?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeRCompComponent
   */
  rightImg2?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeRCompComponent
   */
  letterImg?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutComplexComponentRightTopCard}
   * @memberof HomeRCompComponent
   */
  cardText?: AboutComplexComponentRightTopCard;
}
/**
 *
 * @export
 * @interface HomeSecondACompComponent
 */
export interface HomeSecondACompComponent {
  /**
   *
   * @type {number}
   * @memberof HomeSecondACompComponent
   */
  id?: number;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeSecondACompComponent
   */
  leftImg1?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeSecondACompComponent
   */
  leftImg2?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutHeroComponentImg1}
   * @memberof HomeSecondACompComponent
   */
  leftImg3?: AboutHeroComponentImg1;
  /**
   *
   * @type {AboutComplexComponentRightTopCard}
   * @memberof HomeSecondACompComponent
   */
  cardText?: AboutComplexComponentRightTopCard;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
  /**
   *
   * @type {ErrorData}
   * @memberof ModelError
   */
  data?: ErrorData | null;
  /**
   *
   * @type {ErrorError}
   * @memberof ModelError
   */
  error: ErrorError;
}
/**
 *
 * @export
 * @interface UploadFileListResponse
 */
export interface UploadFileListResponse {
  /**
   *
   * @type {Array<UploadFileListResponseDataItem>}
   * @memberof UploadFileListResponse
   */
  data?: Array<UploadFileListResponseDataItem>;
  /**
   *
   * @type {AboutPageListResponseMeta}
   * @memberof UploadFileListResponse
   */
  meta?: AboutPageListResponseMeta;
}
/**
 *
 * @export
 * @interface UploadFileListResponseDataItem
 */
export interface UploadFileListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof UploadFileListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {AboutHeroComponentImg1DataAttributes}
   * @memberof UploadFileListResponseDataItem
   */
  attributes?: AboutHeroComponentImg1DataAttributes;
}
/**
 *
 * @export
 * @interface UploadFileListResponseDataItemLocalized
 */
export interface UploadFileListResponseDataItemLocalized {
  /**
   *
   * @type {number}
   * @memberof UploadFileListResponseDataItemLocalized
   */
  id?: number;
  /**
   *
   * @type {AboutHeroComponentImg1DataAttributes}
   * @memberof UploadFileListResponseDataItemLocalized
   */
  attributes?: AboutHeroComponentImg1DataAttributes;
}
/**
 *
 * @export
 * @interface UploadFileRequest
 */
export interface UploadFileRequest {
  /**
   *
   * @type {UploadFileRequestData}
   * @memberof UploadFileRequest
   */
  data: UploadFileRequestData;
}
/**
 *
 * @export
 * @interface UploadFileRequestData
 */
export interface UploadFileRequestData {
  /**
   *
   * @type {string}
   * @memberof UploadFileRequestData
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UploadFileRequestData
   */
  alternativeText?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFileRequestData
   */
  caption?: string;
  /**
   *
   * @type {number}
   * @memberof UploadFileRequestData
   */
  width?: number;
  /**
   *
   * @type {number}
   * @memberof UploadFileRequestData
   */
  height?: number;
  /**
   *
   * @type {any}
   * @memberof UploadFileRequestData
   */
  formats?: any;
  /**
   *
   * @type {string}
   * @memberof UploadFileRequestData
   */
  hash: string;
  /**
   *
   * @type {string}
   * @memberof UploadFileRequestData
   */
  ext?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFileRequestData
   */
  mime: string;
  /**
   *
   * @type {number}
   * @memberof UploadFileRequestData
   */
  size: number;
  /**
   *
   * @type {string}
   * @memberof UploadFileRequestData
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof UploadFileRequestData
   */
  previewUrl?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFileRequestData
   */
  provider: string;
  /**
   *
   * @type {any}
   * @memberof UploadFileRequestData
   */
  provider_metadata?: any;
  /**
   *
   * @type {Array<CatalogueRequestDataImg>}
   * @memberof UploadFileRequestData
   */
  related?: Array<CatalogueRequestDataImg>;
  /**
   *
   * @type {CatalogueRequestDataImg}
   * @memberof UploadFileRequestData
   */
  folder?: CatalogueRequestDataImg;
  /**
   *
   * @type {string}
   * @memberof UploadFileRequestData
   */
  folderPath: string;
}
/**
 *
 * @export
 * @interface UploadFileResponse
 */
export interface UploadFileResponse {
  /**
   *
   * @type {UploadFileResponseDataObject}
   * @memberof UploadFileResponse
   */
  data?: UploadFileResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof UploadFileResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface UploadFileResponseDataObject
 */
export interface UploadFileResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof UploadFileResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {AboutHeroComponentImg1DataAttributes}
   * @memberof UploadFileResponseDataObject
   */
  attributes?: AboutHeroComponentImg1DataAttributes;
}
/**
 *
 * @export
 * @interface UploadFileResponseDataObjectLocalized
 */
export interface UploadFileResponseDataObjectLocalized {
  /**
   *
   * @type {number}
   * @memberof UploadFileResponseDataObjectLocalized
   */
  id?: number;
  /**
   *
   * @type {AboutHeroComponentImg1DataAttributes}
   * @memberof UploadFileResponseDataObjectLocalized
   */
  attributes?: AboutHeroComponentImg1DataAttributes;
}
/**
 *
 * @export
 * @interface UploadFolderListResponse
 */
export interface UploadFolderListResponse {
  /**
   *
   * @type {Array<UploadFolderListResponseDataItem>}
   * @memberof UploadFolderListResponse
   */
  data?: Array<UploadFolderListResponseDataItem>;
  /**
   *
   * @type {AboutPageListResponseMeta}
   * @memberof UploadFolderListResponse
   */
  meta?: AboutPageListResponseMeta;
}
/**
 *
 * @export
 * @interface UploadFolderListResponseDataItem
 */
export interface UploadFolderListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof UploadFolderListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {UploadFolderListResponseDataItemAttributes}
   * @memberof UploadFolderListResponseDataItem
   */
  attributes?: UploadFolderListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UploadFolderListResponseDataItemAttributes
 */
export interface UploadFolderListResponseDataItemAttributes {
  /**
   *
   * @type {string}
   * @memberof UploadFolderListResponseDataItemAttributes
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof UploadFolderListResponseDataItemAttributes
   */
  pathId?: number;
  /**
   *
   * @type {AboutHeroComponentImg1DataAttributesFolder}
   * @memberof UploadFolderListResponseDataItemAttributes
   */
  parent?: AboutHeroComponentImg1DataAttributesFolder;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof UploadFolderListResponseDataItemAttributes
   */
  children?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof UploadFolderListResponseDataItemAttributes
   */
  files?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {string}
   * @memberof UploadFolderListResponseDataItemAttributes
   */
  path?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFolderListResponseDataItemAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFolderListResponseDataItemAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UploadFolderListResponseDataItemAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UploadFolderListResponseDataItemAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface UploadFolderListResponseDataItemLocalized
 */
export interface UploadFolderListResponseDataItemLocalized {
  /**
   *
   * @type {number}
   * @memberof UploadFolderListResponseDataItemLocalized
   */
  id?: number;
  /**
   *
   * @type {UploadFolderListResponseDataItemAttributes}
   * @memberof UploadFolderListResponseDataItemLocalized
   */
  attributes?: UploadFolderListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UploadFolderRequest
 */
export interface UploadFolderRequest {
  /**
   *
   * @type {UploadFolderRequestData}
   * @memberof UploadFolderRequest
   */
  data: UploadFolderRequestData;
}
/**
 *
 * @export
 * @interface UploadFolderRequestData
 */
export interface UploadFolderRequestData {
  /**
   *
   * @type {string}
   * @memberof UploadFolderRequestData
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof UploadFolderRequestData
   */
  pathId: number;
  /**
   *
   * @type {CatalogueRequestDataImg}
   * @memberof UploadFolderRequestData
   */
  parent?: CatalogueRequestDataImg;
  /**
   *
   * @type {Array<CatalogueRequestDataImg>}
   * @memberof UploadFolderRequestData
   */
  children?: Array<CatalogueRequestDataImg>;
  /**
   *
   * @type {Array<CatalogueRequestDataImg>}
   * @memberof UploadFolderRequestData
   */
  files?: Array<CatalogueRequestDataImg>;
  /**
   *
   * @type {string}
   * @memberof UploadFolderRequestData
   */
  path: string;
}
/**
 *
 * @export
 * @interface UploadFolderResponse
 */
export interface UploadFolderResponse {
  /**
   *
   * @type {UploadFolderResponseDataObject}
   * @memberof UploadFolderResponse
   */
  data?: UploadFolderResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof UploadFolderResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface UploadFolderResponseDataObject
 */
export interface UploadFolderResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof UploadFolderResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {UploadFolderListResponseDataItemAttributes}
   * @memberof UploadFolderResponseDataObject
   */
  attributes?: UploadFolderListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UploadFolderResponseDataObjectLocalized
 */
export interface UploadFolderResponseDataObjectLocalized {
  /**
   *
   * @type {number}
   * @memberof UploadFolderResponseDataObjectLocalized
   */
  id?: number;
  /**
   *
   * @type {UploadFolderListResponseDataItemAttributes}
   * @memberof UploadFolderResponseDataObjectLocalized
   */
  attributes?: UploadFolderListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UsersIdDelete200Response
 */
export interface UsersIdDelete200Response {
  /**
   *
   * @type {number}
   * @memberof UsersIdDelete200Response
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UsersIdDelete200Response
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof UsersIdDelete200Response
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UsersIdDelete200Response
   */
  provider?: string;
  /**
   *
   * @type {boolean}
   * @memberof UsersIdDelete200Response
   */
  confirmed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UsersIdDelete200Response
   */
  blocked?: boolean;
  /**
   *
   * @type {string}
   * @memberof UsersIdDelete200Response
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersIdDelete200Response
   */
  updatedAt?: string;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionListResponse
 */
export interface UsersPermissionsPermissionListResponse {
  /**
   *
   * @type {Array<UsersPermissionsPermissionListResponseDataItem>}
   * @memberof UsersPermissionsPermissionListResponse
   */
  data?: Array<UsersPermissionsPermissionListResponseDataItem>;
  /**
   *
   * @type {AboutPageListResponseMeta}
   * @memberof UsersPermissionsPermissionListResponse
   */
  meta?: AboutPageListResponseMeta;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItem
 */
export interface UsersPermissionsPermissionListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsPermissionListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsPermissionListResponseDataItemAttributes}
   * @memberof UsersPermissionsPermissionListResponseDataItem
   */
  attributes?: UsersPermissionsPermissionListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributes
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributes {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributes
   */
  action?: string;
  /**
   *
   * @type {UsersPermissionsPermissionListResponseDataItemAttributesRole}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributes
   */
  role?: UsersPermissionsPermissionListResponseDataItemAttributesRole;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRole
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRole {
  /**
   *
   * @type {UsersPermissionsPermissionListResponseDataItemAttributesRoleData}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRole
   */
  data?: UsersPermissionsPermissionListResponseDataItemAttributesRoleData;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleData
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleData {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleData
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleData
   */
  attributes?: UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
   */
  type?: string;
  /**
   *
   * @type {UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissions}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
   */
  permissions?: UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissions;
  /**
   *
   * @type {UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsers}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
   */
  users?: UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsers;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissions
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissions {
  /**
   *
   * @type {Array<UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInner>}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissions
   */
  data?: Array<UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInner>;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInner
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInner {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInner
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInner
   */
  attributes?: UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes
   */
  action?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes
   */
  role?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedBy}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedBy;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsers
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsers {
  /**
   *
   * @type {Array<UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInner>}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsers
   */
  data?: Array<UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInner>;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInner
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInner {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInner
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInner
   */
  attributes?: UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  provider?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  resetPasswordToken?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  confirmationToken?: string;
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  confirmed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  blocked?: boolean;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  role?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemLocalized
 */
export interface UsersPermissionsPermissionListResponseDataItemLocalized {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsPermissionListResponseDataItemLocalized
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsPermissionListResponseDataItemAttributes}
   * @memberof UsersPermissionsPermissionListResponseDataItemLocalized
   */
  attributes?: UsersPermissionsPermissionListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionRequest
 */
export interface UsersPermissionsPermissionRequest {
  /**
   *
   * @type {UsersPermissionsPermissionRequestData}
   * @memberof UsersPermissionsPermissionRequest
   */
  data: UsersPermissionsPermissionRequestData;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionRequestData
 */
export interface UsersPermissionsPermissionRequestData {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionRequestData
   */
  action: string;
  /**
   *
   * @type {CatalogueRequestDataImg}
   * @memberof UsersPermissionsPermissionRequestData
   */
  role?: CatalogueRequestDataImg;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionResponse
 */
export interface UsersPermissionsPermissionResponse {
  /**
   *
   * @type {UsersPermissionsPermissionResponseDataObject}
   * @memberof UsersPermissionsPermissionResponse
   */
  data?: UsersPermissionsPermissionResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof UsersPermissionsPermissionResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionResponseDataObject
 */
export interface UsersPermissionsPermissionResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsPermissionResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsPermissionListResponseDataItemAttributes}
   * @memberof UsersPermissionsPermissionResponseDataObject
   */
  attributes?: UsersPermissionsPermissionListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionResponseDataObjectLocalized
 */
export interface UsersPermissionsPermissionResponseDataObjectLocalized {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsPermissionResponseDataObjectLocalized
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsPermissionListResponseDataItemAttributes}
   * @memberof UsersPermissionsPermissionResponseDataObjectLocalized
   */
  attributes?: UsersPermissionsPermissionListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionsGet200Response
 */
export interface UsersPermissionsPermissionsGet200Response {
  /**
   *
   * @type {{ [key: string]: UsersPermissionsPermissionsTreeValue; }}
   * @memberof UsersPermissionsPermissionsGet200Response
   */
  permissions?: {[key: string]: UsersPermissionsPermissionsTreeValue};
}
/**
 * every api
 * @export
 * @interface UsersPermissionsPermissionsTreeValue
 */
export interface UsersPermissionsPermissionsTreeValue {
  /**
   * every controller of the api
   * @type {{ [key: string]: { [key: string]: UsersPermissionsPermissionsTreeValueControllersValueValue; }; }}
   * @memberof UsersPermissionsPermissionsTreeValue
   */
  controllers?: {
    [key: string]: {
      [key: string]: UsersPermissionsPermissionsTreeValueControllersValueValue;
    };
  };
}
/**
 * every action of every controller
 * @export
 * @interface UsersPermissionsPermissionsTreeValueControllersValueValue
 */
export interface UsersPermissionsPermissionsTreeValueControllersValueValue {
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsPermissionsTreeValueControllersValueValue
   */
  enabled?: boolean;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionsTreeValueControllersValueValue
   */
  policy?: string;
}
/**
 *
 * @export
 * @interface UsersPermissionsRole
 */
export interface UsersPermissionsRole {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRole
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRole
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRole
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRole
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRole
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRole
   */
  updatedAt?: string;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleListResponse
 */
export interface UsersPermissionsRoleListResponse {
  /**
   *
   * @type {Array<UsersPermissionsRoleListResponseDataItem>}
   * @memberof UsersPermissionsRoleListResponse
   */
  data?: Array<UsersPermissionsRoleListResponseDataItem>;
  /**
   *
   * @type {AboutPageListResponseMeta}
   * @memberof UsersPermissionsRoleListResponse
   */
  meta?: AboutPageListResponseMeta;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleListResponseDataItem
 */
export interface UsersPermissionsRoleListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRoleListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsRoleListResponseDataItemAttributes}
   * @memberof UsersPermissionsRoleListResponseDataItem
   */
  attributes?: UsersPermissionsRoleListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributes
 */
export interface UsersPermissionsRoleListResponseDataItemAttributes {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributes
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributes
   */
  type?: string;
  /**
   *
   * @type {UsersPermissionsRoleListResponseDataItemAttributesPermissions}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributes
   */
  permissions?: UsersPermissionsRoleListResponseDataItemAttributesPermissions;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributes
   */
  users?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissions
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissions {
  /**
   *
   * @type {Array<UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInner>}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissions
   */
  data?: Array<UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInner>;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInner
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInner {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInner
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInner
   */
  attributes?: UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes
   */
  action?: string;
  /**
   *
   * @type {UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes
   */
  role?: UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRole
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRole {
  /**
   *
   * @type {UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleData}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRole
   */
  data?: UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleData;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleData
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleData {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleData
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleData
   */
  attributes?: UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
   */
  type?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
   */
  permissions?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsers}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
   */
  users?: UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsers;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsers
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsers {
  /**
   *
   * @type {Array<UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInner>}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsers
   */
  data?: Array<UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInner>;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInner
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInner {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInner
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInner
   */
  attributes?: UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  provider?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  resetPasswordToken?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  confirmationToken?: string;
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  confirmed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  blocked?: boolean;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  role?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedBy}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedBy;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemLocalized
 */
export interface UsersPermissionsRoleListResponseDataItemLocalized {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRoleListResponseDataItemLocalized
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsRoleListResponseDataItemAttributes}
   * @memberof UsersPermissionsRoleListResponseDataItemLocalized
   */
  attributes?: UsersPermissionsRoleListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleRequest
 */
export interface UsersPermissionsRoleRequest {
  /**
   *
   * @type {UsersPermissionsRoleRequestData}
   * @memberof UsersPermissionsRoleRequest
   */
  data: UsersPermissionsRoleRequestData;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleRequestData
 */
export interface UsersPermissionsRoleRequestData {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleRequestData
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleRequestData
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRoleRequestData
   */
  type?: string;
  /**
   *
   * @type {Array<CatalogueRequestDataImg>}
   * @memberof UsersPermissionsRoleRequestData
   */
  permissions?: Array<CatalogueRequestDataImg>;
  /**
   *
   * @type {Array<CatalogueRequestDataImg>}
   * @memberof UsersPermissionsRoleRequestData
   */
  users?: Array<CatalogueRequestDataImg>;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleResponse
 */
export interface UsersPermissionsRoleResponse {
  /**
   *
   * @type {UsersPermissionsRoleResponseDataObject}
   * @memberof UsersPermissionsRoleResponse
   */
  data?: UsersPermissionsRoleResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof UsersPermissionsRoleResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleResponseDataObject
 */
export interface UsersPermissionsRoleResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRoleResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsRoleListResponseDataItemAttributes}
   * @memberof UsersPermissionsRoleResponseDataObject
   */
  attributes?: UsersPermissionsRoleListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsRoleResponseDataObjectLocalized
 */
export interface UsersPermissionsRoleResponseDataObjectLocalized {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRoleResponseDataObjectLocalized
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsRoleListResponseDataItemAttributes}
   * @memberof UsersPermissionsRoleResponseDataObjectLocalized
   */
  attributes?: UsersPermissionsRoleListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsRolesGet200Response
 */
export interface UsersPermissionsRolesGet200Response {
  /**
   *
   * @type {Array<UsersPermissionsRolesGet200ResponseRolesInner>}
   * @memberof UsersPermissionsRolesGet200Response
   */
  roles?: Array<UsersPermissionsRolesGet200ResponseRolesInner>;
}
/**
 *
 * @export
 * @interface UsersPermissionsRolesGet200ResponseRolesInner
 */
export interface UsersPermissionsRolesGet200ResponseRolesInner {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  updatedAt?: string;
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  nb_users?: number;
}
/**
 *
 * @export
 * @interface UsersPermissionsRolesGet200ResponseRolesInnerAllOf
 */
export interface UsersPermissionsRolesGet200ResponseRolesInnerAllOf {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInnerAllOf
   */
  nb_users?: number;
}
/**
 *
 * @export
 * @interface UsersPermissionsRolesIdGet200Response
 */
export interface UsersPermissionsRolesIdGet200Response {
  /**
   *
   * @type {UsersPermissionsRole}
   * @memberof UsersPermissionsRolesIdGet200Response
   */
  role?: UsersPermissionsRole;
}
/**
 *
 * @export
 * @interface UsersPermissionsRolesPost200Response
 */
export interface UsersPermissionsRolesPost200Response {
  /**
   *
   * @type {Enum}
   * @memberof UsersPermissionsRolesPost200Response
   */
  ok?: UsersPermissionsRolesPost200ResponseOkEnum;
}

export const UsersPermissionsRolesPost200ResponseOkEnum = {
  True: "true",
} as const;

export type UsersPermissionsRolesPost200ResponseOkEnum =
  (typeof UsersPermissionsRolesPost200ResponseOkEnum)[keyof typeof UsersPermissionsRolesPost200ResponseOkEnum];

/**
 *
 * @export
 * @interface UsersPermissionsRolesPostRequest
 */
export interface UsersPermissionsRolesPostRequest {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesPostRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesPostRequest
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesPostRequest
   */
  type?: string;
  /**
   *
   * @type {{ [key: string]: UsersPermissionsPermissionsTreeValue; }}
   * @memberof UsersPermissionsRolesPostRequest
   */
  permissions?: {[key: string]: UsersPermissionsPermissionsTreeValue};
}
/**
 *
 * @export
 * @interface UsersPermissionsUser
 */
export interface UsersPermissionsUser {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsUser
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUser
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUser
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUser
   */
  provider?: string;
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsUser
   */
  confirmed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsUser
   */
  blocked?: boolean;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUser
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUser
   */
  updatedAt?: string;
}
/**
 *
 * @export
 * @interface UsersPermissionsUserListResponse
 */
export interface UsersPermissionsUserListResponse {
  /**
   *
   * @type {Array<UsersPermissionsUserListResponseDataItem>}
   * @memberof UsersPermissionsUserListResponse
   */
  data?: Array<UsersPermissionsUserListResponseDataItem>;
  /**
   *
   * @type {AboutPageListResponseMeta}
   * @memberof UsersPermissionsUserListResponse
   */
  meta?: AboutPageListResponseMeta;
}
/**
 *
 * @export
 * @interface UsersPermissionsUserListResponseDataItem
 */
export interface UsersPermissionsUserListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsUserListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsUserListResponseDataItemAttributes}
   * @memberof UsersPermissionsUserListResponseDataItem
   */
  attributes?: UsersPermissionsUserListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsUserListResponseDataItemAttributes
 */
export interface UsersPermissionsUserListResponseDataItemAttributes {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserListResponseDataItemAttributes
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserListResponseDataItemAttributes
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserListResponseDataItemAttributes
   */
  provider?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserListResponseDataItemAttributes
   */
  resetPasswordToken?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserListResponseDataItemAttributes
   */
  confirmationToken?: string;
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsUserListResponseDataItemAttributes
   */
  confirmed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsUserListResponseDataItemAttributes
   */
  blocked?: boolean;
  /**
   *
   * @type {UsersPermissionsPermissionListResponseDataItemAttributesRole}
   * @memberof UsersPermissionsUserListResponseDataItemAttributes
   */
  role?: UsersPermissionsPermissionListResponseDataItemAttributesRole;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserListResponseDataItemAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserListResponseDataItemAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsUserListResponseDataItemAttributes
   */
  createdBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole}
   * @memberof UsersPermissionsUserListResponseDataItemAttributes
   */
  updatedBy?: AboutPageListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface UsersPermissionsUserListResponseDataItemLocalized
 */
export interface UsersPermissionsUserListResponseDataItemLocalized {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsUserListResponseDataItemLocalized
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsUserListResponseDataItemAttributes}
   * @memberof UsersPermissionsUserListResponseDataItemLocalized
   */
  attributes?: UsersPermissionsUserListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsUserRegistration
 */
export interface UsersPermissionsUserRegistration {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserRegistration
   */
  jwt?: string;
  /**
   *
   * @type {UsersPermissionsUser}
   * @memberof UsersPermissionsUserRegistration
   */
  user?: UsersPermissionsUser;
}
/**
 *
 * @export
 * @interface UsersPermissionsUserRequest
 */
export interface UsersPermissionsUserRequest {
  /**
   *
   * @type {UsersPermissionsUserRequestData}
   * @memberof UsersPermissionsUserRequest
   */
  data: UsersPermissionsUserRequestData;
}
/**
 *
 * @export
 * @interface UsersPermissionsUserRequestData
 */
export interface UsersPermissionsUserRequestData {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserRequestData
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserRequestData
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserRequestData
   */
  provider?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserRequestData
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserRequestData
   */
  resetPasswordToken?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserRequestData
   */
  confirmationToken?: string;
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsUserRequestData
   */
  confirmed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsUserRequestData
   */
  blocked?: boolean;
  /**
   *
   * @type {CatalogueRequestDataImg}
   * @memberof UsersPermissionsUserRequestData
   */
  role?: CatalogueRequestDataImg;
}
/**
 *
 * @export
 * @interface UsersPermissionsUserResponse
 */
export interface UsersPermissionsUserResponse {
  /**
   *
   * @type {UsersPermissionsUserResponseDataObject}
   * @memberof UsersPermissionsUserResponse
   */
  data?: UsersPermissionsUserResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof UsersPermissionsUserResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface UsersPermissionsUserResponseDataObject
 */
export interface UsersPermissionsUserResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsUserResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsUserListResponseDataItemAttributes}
   * @memberof UsersPermissionsUserResponseDataObject
   */
  attributes?: UsersPermissionsUserListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UsersPermissionsUserResponseDataObjectLocalized
 */
export interface UsersPermissionsUserResponseDataObjectLocalized {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsUserResponseDataObjectLocalized
   */
  id?: number;
  /**
   *
   * @type {UsersPermissionsUserListResponseDataItemAttributes}
   * @memberof UsersPermissionsUserResponseDataObjectLocalized
   */
  attributes?: UsersPermissionsUserListResponseDataItemAttributes;
}
/**
 *
 * @export
 * @interface UsersPost201Response
 */
export interface UsersPost201Response {
  /**
   *
   * @type {number}
   * @memberof UsersPost201Response
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UsersPost201Response
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPost201Response
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPost201Response
   */
  provider?: string;
  /**
   *
   * @type {boolean}
   * @memberof UsersPost201Response
   */
  confirmed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UsersPost201Response
   */
  blocked?: boolean;
  /**
   *
   * @type {string}
   * @memberof UsersPost201Response
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPost201Response
   */
  updatedAt?: string;
  /**
   *
   * @type {UsersPermissionsRole}
   * @memberof UsersPost201Response
   */
  role?: UsersPermissionsRole;
}
/**
 *
 * @export
 * @interface UsersPostRequest
 */
export interface UsersPostRequest {
  /**
   *
   * @type {string}
   * @memberof UsersPostRequest
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UsersPostRequest
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof UsersPostRequest
   */
  password: string;
}

/**
 * AboutPageApi - axios parameter creator
 * @export
 */
export const AboutPageApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAboutPage: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/about-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAboutPage: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/about-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter["pagination[withCount]"] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter["pagination[page]"] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter["pagination[pageSize]"] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter["pagination[start]"] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination[limit]"] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter["fields"] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter["populate"] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter["locale"] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {AboutPageRequest} aboutPageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAboutPage: async (
      aboutPageRequest: AboutPageRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'aboutPageRequest' is not null or undefined
      assertParamExists("putAboutPage", "aboutPageRequest", aboutPageRequest);
      const localVarPath = `/about-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        aboutPageRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AboutPageApi - functional programming interface
 * @export
 */
export const AboutPageApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AboutPageApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAboutPage(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAboutPage(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAboutPage(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AboutPageListResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAboutPage(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {AboutPageRequest} aboutPageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putAboutPage(
      aboutPageRequest: AboutPageRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AboutPageResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putAboutPage(
        aboutPageRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * AboutPageApi - factory interface
 * @export
 */
export const AboutPageApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AboutPageApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAboutPage(options?: any): AxiosPromise<number> {
      return localVarFp
        .deleteAboutPage(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAboutPage(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: any
    ): AxiosPromise<AboutPageListResponse> {
      return localVarFp
        .getAboutPage(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AboutPageRequest} aboutPageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAboutPage(
      aboutPageRequest: AboutPageRequest,
      options?: any
    ): AxiosPromise<AboutPageResponse> {
      return localVarFp
        .putAboutPage(aboutPageRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AboutPageApi - object-oriented interface
 * @export
 * @class AboutPageApi
 * @extends {BaseAPI}
 */
export class AboutPageApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AboutPageApi
   */
  public deleteAboutPage(options?: AxiosRequestConfig) {
    return AboutPageApiFp(this.configuration)
      .deleteAboutPage(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AboutPageApi
   */
  public getAboutPage(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: AxiosRequestConfig
  ) {
    return AboutPageApiFp(this.configuration)
      .getAboutPage(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AboutPageRequest} aboutPageRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AboutPageApi
   */
  public putAboutPage(
    aboutPageRequest: AboutPageRequest,
    options?: AxiosRequestConfig
  ) {
    return AboutPageApiFp(this.configuration)
      .putAboutPage(aboutPageRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CatalogueApi - axios parameter creator
 * @export
 */
export const CatalogueApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCataloguesId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteCataloguesId", "id", id);
      const localVarPath = `/catalogues/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogues: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/catalogues`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter["pagination[withCount]"] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter["pagination[page]"] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter["pagination[pageSize]"] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter["pagination[start]"] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination[limit]"] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter["fields"] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter["populate"] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter["locale"] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCataloguesId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCataloguesId", "id", id);
      const localVarPath = `/catalogues/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CatalogueRequest} catalogueRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCatalogues: async (
      catalogueRequest: CatalogueRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'catalogueRequest' is not null or undefined
      assertParamExists("postCatalogues", "catalogueRequest", catalogueRequest);
      const localVarPath = `/catalogues`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        catalogueRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {CatalogueRequest} catalogueRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCataloguesId: async (
      id: number,
      catalogueRequest: CatalogueRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("putCataloguesId", "id", id);
      // verify required parameter 'catalogueRequest' is not null or undefined
      assertParamExists(
        "putCataloguesId",
        "catalogueRequest",
        catalogueRequest
      );
      const localVarPath = `/catalogues/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        catalogueRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CatalogueApi - functional programming interface
 * @export
 */
export const CatalogueApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    CatalogueApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCataloguesId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteCataloguesId(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCatalogues(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CatalogueListResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCatalogues(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCataloguesId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CatalogueResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCataloguesId(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {CatalogueRequest} catalogueRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postCatalogues(
      catalogueRequest: CatalogueRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CatalogueResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postCatalogues(
        catalogueRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {CatalogueRequest} catalogueRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCataloguesId(
      id: number,
      catalogueRequest: CatalogueRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CatalogueResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCataloguesId(
        id,
        catalogueRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * CatalogueApi - factory interface
 * @export
 */
export const CatalogueApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CatalogueApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCataloguesId(id: number, options?: any): AxiosPromise<number> {
      return localVarFp
        .deleteCataloguesId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogues(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: any
    ): AxiosPromise<CatalogueListResponse> {
      return localVarFp
        .getCatalogues(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCataloguesId(
      id: number,
      options?: any
    ): AxiosPromise<CatalogueResponse> {
      return localVarFp
        .getCataloguesId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CatalogueRequest} catalogueRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCatalogues(
      catalogueRequest: CatalogueRequest,
      options?: any
    ): AxiosPromise<CatalogueResponse> {
      return localVarFp
        .postCatalogues(catalogueRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {CatalogueRequest} catalogueRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCataloguesId(
      id: number,
      catalogueRequest: CatalogueRequest,
      options?: any
    ): AxiosPromise<CatalogueResponse> {
      return localVarFp
        .putCataloguesId(id, catalogueRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CatalogueApi - object-oriented interface
 * @export
 * @class CatalogueApi
 * @extends {BaseAPI}
 */
export class CatalogueApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogueApi
   */
  public deleteCataloguesId(id: number, options?: AxiosRequestConfig) {
    return CatalogueApiFp(this.configuration)
      .deleteCataloguesId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogueApi
   */
  public getCatalogues(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: AxiosRequestConfig
  ) {
    return CatalogueApiFp(this.configuration)
      .getCatalogues(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogueApi
   */
  public getCataloguesId(id: number, options?: AxiosRequestConfig) {
    return CatalogueApiFp(this.configuration)
      .getCataloguesId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CatalogueRequest} catalogueRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogueApi
   */
  public postCatalogues(
    catalogueRequest: CatalogueRequest,
    options?: AxiosRequestConfig
  ) {
    return CatalogueApiFp(this.configuration)
      .postCatalogues(catalogueRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {CatalogueRequest} catalogueRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogueApi
   */
  public putCataloguesId(
    id: number,
    catalogueRequest: CatalogueRequest,
    options?: AxiosRequestConfig
  ) {
    return CatalogueApiFp(this.configuration)
      .putCataloguesId(id, catalogueRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ContactPageApi - axios parameter creator
 * @export
 */
export const ContactPageApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContactPage: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/contact-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactPage: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/contact-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter["pagination[withCount]"] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter["pagination[page]"] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter["pagination[pageSize]"] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter["pagination[start]"] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination[limit]"] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter["fields"] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter["populate"] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter["locale"] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {ContactPageRequest} contactPageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putContactPage: async (
      contactPageRequest: ContactPageRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactPageRequest' is not null or undefined
      assertParamExists(
        "putContactPage",
        "contactPageRequest",
        contactPageRequest
      );
      const localVarPath = `/contact-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        contactPageRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ContactPageApi - functional programming interface
 * @export
 */
export const ContactPageApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ContactPageApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteContactPage(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteContactPage(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getContactPage(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ContactPageListResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getContactPage(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {ContactPageRequest} contactPageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putContactPage(
      contactPageRequest: ContactPageRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ContactPageResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putContactPage(
        contactPageRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ContactPageApi - factory interface
 * @export
 */
export const ContactPageApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ContactPageApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContactPage(options?: any): AxiosPromise<number> {
      return localVarFp
        .deleteContactPage(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactPage(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: any
    ): AxiosPromise<ContactPageListResponse> {
      return localVarFp
        .getContactPage(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {ContactPageRequest} contactPageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putContactPage(
      contactPageRequest: ContactPageRequest,
      options?: any
    ): AxiosPromise<ContactPageResponse> {
      return localVarFp
        .putContactPage(contactPageRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ContactPageApi - object-oriented interface
 * @export
 * @class ContactPageApi
 * @extends {BaseAPI}
 */
export class ContactPageApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactPageApi
   */
  public deleteContactPage(options?: AxiosRequestConfig) {
    return ContactPageApiFp(this.configuration)
      .deleteContactPage(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactPageApi
   */
  public getContactPage(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: AxiosRequestConfig
  ) {
    return ContactPageApiFp(this.configuration)
      .getContactPage(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ContactPageRequest} contactPageRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactPageApi
   */
  public putContactPage(
    contactPageRequest: ContactPageRequest,
    options?: AxiosRequestConfig
  ) {
    return ContactPageApiFp(this.configuration)
      .putContactPage(contactPageRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * HomePageApi - axios parameter creator
 * @export
 */
export const HomePageApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHomePage: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/home-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHomePage: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/home-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter["pagination[withCount]"] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter["pagination[page]"] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter["pagination[pageSize]"] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter["pagination[start]"] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination[limit]"] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter["fields"] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter["populate"] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter["locale"] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {HomePageRequest} homePageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putHomePage: async (
      homePageRequest: HomePageRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'homePageRequest' is not null or undefined
      assertParamExists("putHomePage", "homePageRequest", homePageRequest);
      const localVarPath = `/home-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        homePageRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HomePageApi - functional programming interface
 * @export
 */
export const HomePageApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HomePageApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteHomePage(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHomePage(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getHomePage(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<HomePageListResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getHomePage(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {HomePageRequest} homePageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putHomePage(
      homePageRequest: HomePageRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<HomePageResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putHomePage(
        homePageRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * HomePageApi - factory interface
 * @export
 */
export const HomePageApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = HomePageApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHomePage(options?: any): AxiosPromise<number> {
      return localVarFp
        .deleteHomePage(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHomePage(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: any
    ): AxiosPromise<HomePageListResponse> {
      return localVarFp
        .getHomePage(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {HomePageRequest} homePageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putHomePage(
      homePageRequest: HomePageRequest,
      options?: any
    ): AxiosPromise<HomePageResponse> {
      return localVarFp
        .putHomePage(homePageRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * HomePageApi - object-oriented interface
 * @export
 * @class HomePageApi
 * @extends {BaseAPI}
 */
export class HomePageApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HomePageApi
   */
  public deleteHomePage(options?: AxiosRequestConfig) {
    return HomePageApiFp(this.configuration)
      .deleteHomePage(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HomePageApi
   */
  public getHomePage(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: AxiosRequestConfig
  ) {
    return HomePageApiFp(this.configuration)
      .getHomePage(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {HomePageRequest} homePageRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HomePageApi
   */
  public putHomePage(
    homePageRequest: HomePageRequest,
    options?: AxiosRequestConfig
  ) {
    return HomePageApiFp(this.configuration)
      .putHomePage(homePageRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UploadFileApi - axios parameter creator
 * @export
 */
export const UploadFileApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUploadFilesId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteUploadFilesId", "id", id);
      const localVarPath = `/upload/files/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUploadFiles: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/upload/files`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter["pagination[withCount]"] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter["pagination[page]"] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter["pagination[pageSize]"] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter["pagination[start]"] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination[limit]"] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter["fields"] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter["populate"] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter["locale"] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUploadFilesId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUploadFilesId", "id", id);
      const localVarPath = `/upload/files/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UploadFileApi - functional programming interface
 * @export
 */
export const UploadFileApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    UploadFileApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUploadFilesId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteUploadFilesId(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUploadFiles(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UploadFileListResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUploadFiles(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUploadFilesId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UploadFileResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUploadFilesId(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UploadFileApi - factory interface
 * @export
 */
export const UploadFileApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UploadFileApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUploadFilesId(id: number, options?: any): AxiosPromise<number> {
      return localVarFp
        .deleteUploadFilesId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUploadFiles(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: any
    ): AxiosPromise<UploadFileListResponse> {
      return localVarFp
        .getUploadFiles(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUploadFilesId(
      id: number,
      options?: any
    ): AxiosPromise<UploadFileResponse> {
      return localVarFp
        .getUploadFilesId(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UploadFileApi - object-oriented interface
 * @export
 * @class UploadFileApi
 * @extends {BaseAPI}
 */
export class UploadFileApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApi
   */
  public deleteUploadFilesId(id: number, options?: AxiosRequestConfig) {
    return UploadFileApiFp(this.configuration)
      .deleteUploadFilesId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApi
   */
  public getUploadFiles(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: AxiosRequestConfig
  ) {
    return UploadFileApiFp(this.configuration)
      .getUploadFiles(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApi
   */
  public getUploadFilesId(id: number, options?: AxiosRequestConfig) {
    return UploadFileApiFp(this.configuration)
      .getUploadFilesId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersPermissionsAuthApi - axios parameter creator
 * @export
 */
export const UsersPermissionsAuthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Update user\'s own password
     * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authChangePasswordPost: async (
      authChangePasswordPostRequest: AuthChangePasswordPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authChangePasswordPostRequest' is not null or undefined
      assertParamExists(
        "authChangePasswordPost",
        "authChangePasswordPostRequest",
        authChangePasswordPostRequest
      );
      const localVarPath = `/auth/change-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authChangePasswordPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Confirm user email
     * @param {string} [confirmation] confirmation token received by email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authEmailConfirmationGet: async (
      confirmation?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/auth/email-confirmation`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (confirmation !== undefined) {
        localVarQueryParameter["confirmation"] = confirmation;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Send rest password email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authForgotPasswordPost: async (
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
      assertParamExists(
        "authForgotPasswordPost",
        "authForgotPasswordPostRequest",
        authForgotPasswordPostRequest
      );
      const localVarPath = `/auth/forgot-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authForgotPasswordPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns a jwt token and user info
     * @summary Local login
     * @param {AuthLocalPostRequest} authLocalPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLocalPost: async (
      authLocalPostRequest: AuthLocalPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authLocalPostRequest' is not null or undefined
      assertParamExists(
        "authLocalPost",
        "authLocalPostRequest",
        authLocalPostRequest
      );
      const localVarPath = `/auth/local`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authLocalPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns a jwt token and user info
     * @summary Register a user
     * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLocalRegisterPost: async (
      authLocalRegisterPostRequest: AuthLocalRegisterPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authLocalRegisterPostRequest' is not null or undefined
      assertParamExists(
        "authLocalRegisterPost",
        "authLocalRegisterPostRequest",
        authLocalRegisterPostRequest
      );
      const localVarPath = `/auth/local/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authLocalRegisterPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Default Callback from provider auth
     * @param {string} provider Provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderCallbackGet: async (
      provider: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'provider' is not null or undefined
      assertParamExists("authProviderCallbackGet", "provider", provider);
      const localVarPath = `/auth/{provider}/callback`.replace(
        `{${"provider"}}`,
        encodeURIComponent(String(provider))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Rest user password
     * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authResetPasswordPost: async (
      authResetPasswordPostRequest: AuthResetPasswordPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authResetPasswordPostRequest' is not null or undefined
      assertParamExists(
        "authResetPasswordPost",
        "authResetPasswordPostRequest",
        authResetPasswordPostRequest
      );
      const localVarPath = `/auth/reset-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authResetPasswordPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Send confirmation email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSendEmailConfirmationPost: async (
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
      assertParamExists(
        "authSendEmailConfirmationPost",
        "authForgotPasswordPostRequest",
        authForgotPasswordPostRequest
      );
      const localVarPath = `/auth/send-email-confirmation`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authForgotPasswordPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @summary Login with a provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/connect/(.*)`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersPermissionsAuthApi - functional programming interface
 * @export
 */
export const UsersPermissionsAuthApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    UsersPermissionsAuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Update user\'s own password
     * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authChangePasswordPost(
      authChangePasswordPostRequest: AuthChangePasswordPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsUserRegistration>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authChangePasswordPost(
          authChangePasswordPostRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Confirm user email
     * @param {string} [confirmation] confirmation token received by email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authEmailConfirmationGet(
      confirmation?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authEmailConfirmationGet(
          confirmation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Send rest password email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authForgotPasswordPost(
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsRolesPost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authForgotPasswordPost(
          authForgotPasswordPostRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Returns a jwt token and user info
     * @summary Local login
     * @param {AuthLocalPostRequest} authLocalPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authLocalPost(
      authLocalPostRequest: AuthLocalPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsUserRegistration>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authLocalPost(
        authLocalPostRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Returns a jwt token and user info
     * @summary Register a user
     * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authLocalRegisterPost(
      authLocalRegisterPostRequest: AuthLocalRegisterPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsUserRegistration>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authLocalRegisterPost(
          authLocalRegisterPostRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Default Callback from provider auth
     * @param {string} provider Provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authProviderCallbackGet(
      provider: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsUserRegistration>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authProviderCallbackGet(
          provider,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Rest user password
     * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authResetPasswordPost(
      authResetPasswordPostRequest: AuthResetPasswordPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsUserRegistration>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authResetPasswordPost(
          authResetPasswordPostRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Send confirmation email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authSendEmailConfirmationPost(
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AuthSendEmailConfirmationPost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authSendEmailConfirmationPost(
          authForgotPasswordPostRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @summary Login with a provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async connectGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.connectGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UsersPermissionsAuthApi - factory interface
 * @export
 */
export const UsersPermissionsAuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UsersPermissionsAuthApiFp(configuration);
  return {
    /**
     *
     * @summary Update user\'s own password
     * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authChangePasswordPost(
      authChangePasswordPostRequest: AuthChangePasswordPostRequest,
      options?: any
    ): AxiosPromise<UsersPermissionsUserRegistration> {
      return localVarFp
        .authChangePasswordPost(authChangePasswordPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Confirm user email
     * @param {string} [confirmation] confirmation token received by email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authEmailConfirmationGet(
      confirmation?: string,
      options?: any
    ): AxiosPromise<Error> {
      return localVarFp
        .authEmailConfirmationGet(confirmation, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Send rest password email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authForgotPasswordPost(
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options?: any
    ): AxiosPromise<UsersPermissionsRolesPost200Response> {
      return localVarFp
        .authForgotPasswordPost(authForgotPasswordPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns a jwt token and user info
     * @summary Local login
     * @param {AuthLocalPostRequest} authLocalPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLocalPost(
      authLocalPostRequest: AuthLocalPostRequest,
      options?: any
    ): AxiosPromise<UsersPermissionsUserRegistration> {
      return localVarFp
        .authLocalPost(authLocalPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns a jwt token and user info
     * @summary Register a user
     * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLocalRegisterPost(
      authLocalRegisterPostRequest: AuthLocalRegisterPostRequest,
      options?: any
    ): AxiosPromise<UsersPermissionsUserRegistration> {
      return localVarFp
        .authLocalRegisterPost(authLocalRegisterPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Default Callback from provider auth
     * @param {string} provider Provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderCallbackGet(
      provider: string,
      options?: any
    ): AxiosPromise<UsersPermissionsUserRegistration> {
      return localVarFp
        .authProviderCallbackGet(provider, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Rest user password
     * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authResetPasswordPost(
      authResetPasswordPostRequest: AuthResetPasswordPostRequest,
      options?: any
    ): AxiosPromise<UsersPermissionsUserRegistration> {
      return localVarFp
        .authResetPasswordPost(authResetPasswordPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Send confirmation email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSendEmailConfirmationPost(
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options?: any
    ): AxiosPromise<AuthSendEmailConfirmationPost200Response> {
      return localVarFp
        .authSendEmailConfirmationPost(authForgotPasswordPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @summary Login with a provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectGet(options?: any): AxiosPromise<Error> {
      return localVarFp
        .connectGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersPermissionsAuthApi - object-oriented interface
 * @export
 * @class UsersPermissionsAuthApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsAuthApi extends BaseAPI {
  /**
   *
   * @summary Update user\'s own password
   * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authChangePasswordPost(
    authChangePasswordPostRequest: AuthChangePasswordPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authChangePasswordPost(authChangePasswordPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Confirm user email
   * @param {string} [confirmation] confirmation token received by email
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authEmailConfirmationGet(
    confirmation?: string,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authEmailConfirmationGet(confirmation, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Send rest password email
   * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authForgotPasswordPost(
    authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authForgotPasswordPost(authForgotPasswordPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Returns a jwt token and user info
   * @summary Local login
   * @param {AuthLocalPostRequest} authLocalPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authLocalPost(
    authLocalPostRequest: AuthLocalPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authLocalPost(authLocalPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Returns a jwt token and user info
   * @summary Register a user
   * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authLocalRegisterPost(
    authLocalRegisterPostRequest: AuthLocalRegisterPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authLocalRegisterPost(authLocalRegisterPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Default Callback from provider auth
   * @param {string} provider Provider name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authProviderCallbackGet(
    provider: string,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authProviderCallbackGet(provider, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Rest user password
   * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authResetPasswordPost(
    authResetPasswordPostRequest: AuthResetPasswordPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authResetPasswordPost(authResetPasswordPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Send confirmation email
   * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authSendEmailConfirmationPost(
    authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authSendEmailConfirmationPost(authForgotPasswordPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Redirects to provider login before being redirect to /auth/{provider}/callback
   * @summary Login with a provider
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public connectGet(options?: AxiosRequestConfig) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .connectGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersPermissionsUsersRolesApi - axios parameter creator
 * @export
 */
export const UsersPermissionsUsersRolesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get user count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCountGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdDelete: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("usersIdDelete", "id", id);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdGet: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("usersIdGet", "id", id);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a user
     * @param {string} id user Id
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdPut: async (
      id: string,
      usersPostRequest: UsersPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("usersIdPut", "id", id);
      // verify required parameter 'usersPostRequest' is not null or undefined
      assertParamExists("usersIdPut", "usersPostRequest", usersPostRequest);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        usersPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get authenticated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get default generated permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsPermissionsGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users-permissions/permissions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users-permissions/roles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a role
     * @param {string} id role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesIdGet: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("usersPermissionsRolesIdGet", "id", id);
      const localVarPath = `/users-permissions/roles/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a role
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesPost: async (
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'usersPermissionsRolesPostRequest' is not null or undefined
      assertParamExists(
        "usersPermissionsRolesPost",
        "usersPermissionsRolesPostRequest",
        usersPermissionsRolesPostRequest
      );
      const localVarPath = `/users-permissions/roles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        usersPermissionsRolesPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a role
     * @param {string} role role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesRoleDelete: async (
      role: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'role' is not null or undefined
      assertParamExists("usersPermissionsRolesRoleDelete", "role", role);
      const localVarPath = `/users-permissions/roles/{role}`.replace(
        `{${"role"}}`,
        encodeURIComponent(String(role))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a role
     * @param {string} role role Id
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesRolePut: async (
      role: string,
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'role' is not null or undefined
      assertParamExists("usersPermissionsRolesRolePut", "role", role);
      // verify required parameter 'usersPermissionsRolesPostRequest' is not null or undefined
      assertParamExists(
        "usersPermissionsRolesRolePut",
        "usersPermissionsRolesPostRequest",
        usersPermissionsRolesPostRequest
      );
      const localVarPath = `/users-permissions/roles/{role}`.replace(
        `{${"role"}}`,
        encodeURIComponent(String(role))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        usersPermissionsRolesPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a user
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost: async (
      usersPostRequest: UsersPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'usersPostRequest' is not null or undefined
      assertParamExists("usersPost", "usersPostRequest", usersPostRequest);
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        usersPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersPermissionsUsersRolesApi - functional programming interface
 * @export
 */
export const UsersPermissionsUsersRolesApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    UsersPermissionsUsersRolesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get user count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersCountGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersCountGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersGet(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<UsersPermissionsUser>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdDelete(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersIdDelete200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdDelete(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdGet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsUser>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a user
     * @param {string} id user Id
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdPut(
      id: string,
      usersPostRequest: UsersPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPost201Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPut(
        id,
        usersPostRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get authenticated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeGet(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsUser>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get default generated permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsPermissionsGet(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsPermissionsGet200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersPermissionsPermissionsGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary List roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsRolesGet(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsRolesGet200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersPermissionsRolesGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get a role
     * @param {string} id role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsRolesIdGet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsRolesIdGet200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersPermissionsRolesIdGet(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create a role
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsRolesPost(
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsRolesPost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersPermissionsRolesPost(
          usersPermissionsRolesPostRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete a role
     * @param {string} role role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsRolesRoleDelete(
      role: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsRolesPost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersPermissionsRolesRoleDelete(
          role,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a role
     * @param {string} role role Id
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsRolesRolePut(
      role: string,
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsRolesPost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersPermissionsRolesRolePut(
          role,
          usersPermissionsRolesPostRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create a user
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPost(
      usersPostRequest: UsersPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPost201Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersPost(
        usersPostRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UsersPermissionsUsersRolesApi - factory interface
 * @export
 */
export const UsersPermissionsUsersRolesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UsersPermissionsUsersRolesApiFp(configuration);
  return {
    /**
     *
     * @summary Get user count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCountGet(options?: any): AxiosPromise<number> {
      return localVarFp
        .usersCountGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGet(options?: any): AxiosPromise<Array<UsersPermissionsUser>> {
      return localVarFp
        .usersGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdDelete(
      id: string,
      options?: any
    ): AxiosPromise<UsersIdDelete200Response> {
      return localVarFp
        .usersIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdGet(id: string, options?: any): AxiosPromise<UsersPermissionsUser> {
      return localVarFp
        .usersIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a user
     * @param {string} id user Id
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdPut(
      id: string,
      usersPostRequest: UsersPostRequest,
      options?: any
    ): AxiosPromise<UsersPost201Response> {
      return localVarFp
        .usersIdPut(id, usersPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get authenticated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet(options?: any): AxiosPromise<UsersPermissionsUser> {
      return localVarFp
        .usersMeGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get default generated permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsPermissionsGet(
      options?: any
    ): AxiosPromise<UsersPermissionsPermissionsGet200Response> {
      return localVarFp
        .usersPermissionsPermissionsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesGet(
      options?: any
    ): AxiosPromise<UsersPermissionsRolesGet200Response> {
      return localVarFp
        .usersPermissionsRolesGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a role
     * @param {string} id role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesIdGet(
      id: string,
      options?: any
    ): AxiosPromise<UsersPermissionsRolesIdGet200Response> {
      return localVarFp
        .usersPermissionsRolesIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a role
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesPost(
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options?: any
    ): AxiosPromise<UsersPermissionsRolesPost200Response> {
      return localVarFp
        .usersPermissionsRolesPost(usersPermissionsRolesPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a role
     * @param {string} role role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesRoleDelete(
      role: string,
      options?: any
    ): AxiosPromise<UsersPermissionsRolesPost200Response> {
      return localVarFp
        .usersPermissionsRolesRoleDelete(role, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a role
     * @param {string} role role Id
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesRolePut(
      role: string,
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options?: any
    ): AxiosPromise<UsersPermissionsRolesPost200Response> {
      return localVarFp
        .usersPermissionsRolesRolePut(
          role,
          usersPermissionsRolesPostRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a user
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost(
      usersPostRequest: UsersPostRequest,
      options?: any
    ): AxiosPromise<UsersPost201Response> {
      return localVarFp
        .usersPost(usersPostRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersPermissionsUsersRolesApi - object-oriented interface
 * @export
 * @class UsersPermissionsUsersRolesApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsUsersRolesApi extends BaseAPI {
  /**
   *
   * @summary Get user count
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersCountGet(options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersCountGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get list of users
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersGet(options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a user
   * @param {string} id user Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersIdDelete(id: string, options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a user
   * @param {string} id user Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersIdGet(id: string, options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a user
   * @param {string} id user Id
   * @param {UsersPostRequest} usersPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersIdPut(
    id: string,
    usersPostRequest: UsersPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersIdPut(id, usersPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get authenticated user info
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersMeGet(options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersMeGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get default generated permissions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsPermissionsGet(options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsPermissionsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List roles
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsRolesGet(options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsRolesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a role
   * @param {string} id role Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsRolesIdGet(id: string, options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsRolesIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a role
   * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsRolesPost(
    usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsRolesPost(usersPermissionsRolesPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a role
   * @param {string} role role Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsRolesRoleDelete(
    role: string,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsRolesRoleDelete(role, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a role
   * @param {string} role role Id
   * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsRolesRolePut(
    role: string,
    usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsRolesRolePut(
        role,
        usersPermissionsRolesPostRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a user
   * @param {UsersPostRequest} usersPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPost(
    usersPostRequest: UsersPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPost(usersPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
